
struct appin
{
	float4 iPosition          : POSITION;
	float4 iNormal            : NORMAL;
	float4 shadMapTexCoord    : TEXCOORD0;
    float4 imgTexCoord        : TEXCOORD1;
	float4 iColor             : COLOR;
};

struct vertout
{
	float4 oPosition		  : POSITION;
	float4 oColor             : COLOR;
	float4 shadMapTexCoord    : TEXCOORD0;
	float4 imgTexCoord        : TEXCOORD1;
	float4 debug              : TEXCOORD5;
};


vertout main( appin IN,
              uniform float4x4 mv   : state.matrix.modelview,
              uniform float4x4 mvInvTrans : state.matrix.modelview.invtrans,
              uniform float4x4 mvInv : state.matrix.modelview.inverse,
			  uniform float4x4 mvp  : state.matrix.mvp,
			  uniform float4x4 tex0  : state.matrix.texture[0],
			  uniform float4x4 tex0InvTrans : state.matrix.texture[0].invtrans,
			  uniform float4 texGenS : state.texgen[0].eye.s.xyzw,  // otherwise Cg treats '.s' as a swizzle!! 
			  uniform float4 texGenT : state.texgen[0].eye.t.xyzw,
			  uniform float4 texGenR : state.texgen[0].eye.r.xyzw,
			  uniform float4 texGenQ : state.texgen[0].eye.q.xyzw )
{
	vertout OUT;
	float4 mvPos, lightPos;

	OUT.oPosition = mul( mvp, IN.iPosition );
	OUT.imgTexCoord = IN.imgTexCoord;
	OUT.oColor = IN.iColor;
		
	mvPos = mul( mv, IN.iPosition );
	OUT.shadMapTexCoord.x = dot( texGenS, mvPos );
	OUT.shadMapTexCoord.y = dot( texGenT, mvPos );
	OUT.shadMapTexCoord.z = dot( texGenR, mvPos );
	OUT.shadMapTexCoord.w = dot( texGenQ, mvPos );	
	
	return OUT;
}
